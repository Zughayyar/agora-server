name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push job - runs on both PR and push
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.tag.outputs.single-tag }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract single image tag
        id: tag
        run: |
          # Extract the first tag from the comma-separated list
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | tr -d ' ')
          echo "single-tag=$FIRST_TAG" >> $GITHUB_OUTPUT
          echo "📦 Using image tag: $FIRST_TAG"

      - name: Build status
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "✅ PR Build completed successfully!"
            echo "🔍 This was a Pull Request build - no image pushed"
          else
            echo "✅ Main branch build completed successfully!"
            echo "📤 Image pushed to: ${{ steps.meta.outputs.tags }}"
            echo "🚀 Proceeding to deployment..."
          fi

  # Deploy job - only runs on push to main
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to AWS server
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        with:
          host: ${{ secrets.AWS_IP }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          envs: GITHUB_TOKEN,GITHUB_ACTOR,IMAGE_TAG
          script: |
            # Navigate to application directory
            cd /home/${{ secrets.AWS_USER }}/agora-server || exit 1

            # Pull latest code (for docker-compose.yml updates)
            git pull origin main

            # Login to GitHub Container Registry
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

            # Set the image tag for deployment (already available as env var)
            echo "📥 Pulling image: $IMAGE_TAG"

            # Update .env with the new image tag
            if grep -q "IMAGE_TAG=" .env; then
              sed -i "s|IMAGE_TAG=.*|IMAGE_TAG=$IMAGE_TAG|" .env
            else
              echo "IMAGE_TAG=$IMAGE_TAG" >> .env
            fi

            # Debug: Show the .env file content
            echo "🔍 Current .env IMAGE_TAG:"
            grep "IMAGE_TAG=" .env || echo "No IMAGE_TAG found in .env"

            # Stop existing containers
            docker-compose down || true

            # Pull the pre-built image (no rebuild!)
            docker-compose pull

            # Start services with pre-built image
            docker-compose up -d

            # Clean up old images
            docker image prune -f || true

            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 30

            # Check if containers are running
            docker-compose ps

            echo "🎉 Deployment completed!"
            echo "📦 Using image: $IMAGE_TAG"

      - name: Health check
        run: |
          echo "🏥 Performing health check..."
          sleep 10

          # Check root health endpoint
          curl --fail --retry 5 --retry-delay 10 \
            http://${{ secrets.AWS_IP }}:3000/health || exit 1

          # Check API health endpoint  
          curl --fail --retry 5 --retry-delay 10 \
            http://${{ secrets.AWS_IP }}:3000/api/v1/health || exit 1

          echo "✅ Health check passed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🚀 Deployment successful!"
            echo "🌐 Application available at: http://${{ secrets.AWS_IP }}:3000"
            echo "🏥 Health check: http://${{ secrets.AWS_IP }}:3000/health"
            echo "📦 Image: ${{ needs.build.outputs.image-tag }}"
          else
            echo "❌ Deployment failed!"
          fi
