name: Deploy to AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Build and test job - runs on both PR and push
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false # Never push from build job
          tags: agora-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build status
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "‚úÖ PR Build completed successfully!"
            echo "üîç This was a Pull Request build - no deployment triggered"
          else
            echo "‚úÖ Main branch build completed successfully!"
            echo "üöÄ Proceeding to deployment..."
          fi

  # Deploy job - only runs on push to main
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to AWS server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_IP }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          script: |
            # Navigate to application directory
            cd /home/${{ secrets.AWS_USER }}/agora-server || exit 1

            # Pull latest code
            git pull origin main

            # Copy environment file if it doesn't exist
            if [ ! -f .env ]; then
              cp env.example .env
              echo "‚ö†Ô∏è  Please configure .env file with your settings"
            fi

            # Stop existing containers
            docker-compose down || true

            # Remove old images
            docker image prune -f || true

            # Build and start services (builds fresh on server)
            docker-compose up -d --build

            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 30

            # Check if containers are running
            docker-compose ps

            echo "üéâ Deployment completed!"

      - name: Health check
        run: |
          echo "üè• Performing health check..."
          sleep 10

          # Check root health endpoint
          curl --fail --retry 5 --retry-delay 10 \
            http://${{ secrets.AWS_IP }}:3000/health || exit 1

          # Check API health endpoint  
          curl --fail --retry 5 --retry-delay 10 \
            http://${{ secrets.AWS_IP }}:3000/api/v1/health || exit 1

          echo "‚úÖ Health check passed!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment successful!"
            echo "üåê Application available at: http://${{ secrets.AWS_IP }}:3000"
            echo "üè• Health check: http://${{ secrets.AWS_IP }}:3000/health"
          else
            echo "‚ùå Deployment failed!"
          fi
